---
title: Export Notion to Markdown
description: Learn about all the possible ways to convert your Notion pages and databases to Markdown format.
image: https://notionbackups.com/assets/images/papers.png
kind: article
created_at: 2024-11-13
updated_at: 2024-11-13
---

<% content_for :head do %>
  <meta name="robots" content="max-image-preview:large">

  <script src="/assets/javascripts/highlight.min.js" defer></script>

  <script type="application/ld+json">
  {
    "@context": "https://schema.org/",
    "@id": "https://notionbackups.com/guides/export-notion-to-markdown",
    "@type": "TechArticle",
    "headline": "<%= @item[:title] %>",
    "datePublished": "<%= item[:created_at] %>",
    "dateModified": "<%= item[:updated_at] %>",
    "image": "<%= item[:image] %>",
    "description": "<%= @item[:description] %>",
    "inLanguage": "en-US",
    "copyrightHolder": {
      "@type": "Organization",
      "name": "Notion Backups"
    },
    "publisher": {
      "@type": "Organization",
      "name": "Notion Backups"
    },
    "author": {
      "@type": "Organization",
      "name": "Notion Backups"
    }
  }
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      hljs.highlightAll();

      const copyButtonLabel = "Copy";

      // use a class selector if available
      let blocks = document.querySelectorAll("pre");

      blocks.forEach((block) => {
        // only add button if browser supports Clipboard API
        if (navigator.clipboard) {
          let button = document.createElement("button");

          button.innerText = copyButtonLabel;
          block.appendChild(button);
          block.setAttribute("tabindex", 0);

          button.addEventListener("click", async () => {
            await copyCode(block, button);
          });
        }
      });

      async function copyCode(block, button) {
        let code = block.querySelector("code");
        let text = code.innerText;

        await navigator.clipboard.writeText(text);

        // visual feedback that task is completed
        button.innerText = "Copied";

        setTimeout(() => {
          button.innerText = copyButtonLabel;
        }, 900);
      }
    })
  </script>

  <link rel="stylesheet" href="/assets/stylesheets/apprentice.min.css">

  <style>
    pre {
      position: relative;
      overflow: auto;
    }

    pre code + button {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 0.25rem;
    }

    pre code + button:hover {
      cursor: pointer;
    }
  </style>
<% end %>

<article class="px-4 mt-24 mb-12 sm:px-6 lg:px-8">
<div class="max-w-prose mx-auto">
  <h1 class="mt-2 text-center">
    Export Notion Data to Markdown
  </h1>

  <p class="mt-6 text-base text-gray-600 text-center">Updated: <time datetime="<%= item[:updated_at] %>"><%= item[:updated_at].strftime("%B %-d, %Y") %></time></p>

  <p class="mt-8">There are three ways to export your Notion workspace data to Markdown:</p>

  <ol class="mt-8 text-xl text-gray-700 leading-8 list-outside m-4">
    <li class="mt-2">Using Notion's built-in export feature</li>
    <li class="mt-2">Using the Notion API</li>
    <li class="mt-2">Using Notion Backups</li>
  </ol>

  <h2 class="my-8">Notion's built-in export feature</h2>

  <p class="mt-8">Notion's <a href="https://www.notion.so/help/export-your-content#export-as-markdown-&-csv" target="_blank" rel="noopener" class="underline">native export feature</a>, though manual, is the most straightforward way to get your data out of Notion. You can either export a single page or an entire workspace.</p>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-4 my-8">
    <img src="/assets/images/notion-export-page-markdown-sidebar-menu.png" alt="Exporting a single page to Markdown in Notion (sidebar menu)" class="shadow-lg rounded-lg mx-auto w-4/5 md:w-full border border-gray-200" loading="lazy">
    <div class="flex items-center">
      <img src="/assets/images/notion-page-export-modal.png" alt="Exporting a single page to Markdown in Notion (modal)" class="shadow-lg rounded-lg mx-auto w-4/5 md:w-full border border-gray-200" loading="lazy">
    </div>
  </div>

  <p class="mt-8">Keep in mind that databases will be exported as CSV files.</p>

  <p class="mt-8">For larger workspaces, exports can take anywhere from a few hours to a few days. Itâ€™s not uncommon for exports to fail occasionally.</p>

  <h2 class="my-8">Notion API</h2>

  <p class="mt-8">If you have the technical chops, you could automate the export process using third-party libraries.</p>

  <p class="mt-8">First, create an internal integration and <a href="/guides/automated-notion-backup-api.html#create-integration" target="_blank" rel="noopener" class="underline">grab an authentication token</a>.</p>

  <p class="mt-8">You can use of of the many third-party packages, such as <a href="https://github.com/souvikinator/notion-to-md" target="_blank" rel="noopener" class="underline">notion-to-md</a>. Replace the <code>your integration token</code> placeholder with your own authentication token and <code>target_page_id</code> with the ID of the page you want to export.</p>

  <pre><code>const { Client } = require("@notionhq/client");
const { NotionToMarkdown } = require("notion-to-md");
const fs = require('fs');
// or
// import {NotionToMarkdown} from "notion-to-md";

const notion = new Client({
  auth: "your integration token",
});

const n2m = new NotionToMarkdown({ notionClient: notion });

(async () => {
  const mdblocks = await n2m.pageToMarkdown("target_page_id");
  const mdString = n2m.toMarkdownString(mdblocks);
  console.log(mdString.parent);
})();</code></pre>

  <h2 class="my-8">Notion Backups</h2>

  <p class="mt-8">Notion Backups allows you to easily <a href="/docs/backups.html#markdown-format" class="underline" target="_blank" rel="noopener">export your Notion data to Markdown</a> and save it in the cloud storage provider of your choice. Unlike Notion's built-in Markdown export, our backups are exclusively in Markdown and contain no CSV files</p>

  <p class="mt-8">Make sure you check the "Back up in Markdown format" option in the workspace settings.</p>

  <%= render '/_cta.html' %>
</div>
</article>
